<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on JavaChen Blog</title>
    <link>https://blog.javachen.space/categories/kubernetes/</link>
    <description>Recent content in kubernetes on JavaChen Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.javachen.space/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TLS on K3s with traefik, cert manger and letsencrypt</title>
      <link>https://blog.javachen.space/2020/03/20/k3s-cert-manager-letsencrypt/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2020/03/20/k3s-cert-manager-letsencrypt/</guid>
      <description>原文：https://www.thebookofjoel.com/k3s-cert-manager-letsencrypt ，本文只是我的测试</description>
    </item>
    
    <item>
      <title>使用K3d安装K3s</title>
      <link>https://blog.javachen.space/2020/03/20/install-k3s-with-k3d/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2020/03/20/install-k3s-with-k3d/</guid>
      <description>安装K3d 脚本安装： 1 2 wget -q -O - https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash curl -s https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash homebrew安装： 1 brew install k3d 设置环境变量： 1 export KUBECONFIG=&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-default&amp;#39;)&amp;#34; 本地安装kubectl: 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>使用K3sup安装K3S</title>
      <link>https://blog.javachen.space/2020/03/19/install-k3s-with-k3sup/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2020/03/19/install-k3s-with-k3sup/</guid>
      <description>k3sup是一个支持在PC、虚拟机、ARM设备上安装k3s的工具，官方网站：https://k3sup.dev/ 配置SSH k3sup是基于s</description>
    </item>
    
    <item>
      <title>安装K3S</title>
      <link>https://blog.javachen.space/2020/03/18/install-k3s/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2020/03/18/install-k3s/</guid>
      <description>本文在我购买的虚拟机主机上安装k3s，虚拟主机有公网IP并且做了DNS域名解析。 安装Docker 1 2 3 curl -fsSL get.docker.com | sh usermod -aG docker `whoami` systemctl enable docker &amp;amp;&amp;amp; systemctl start docker 离线安</description>
    </item>
    
    <item>
      <title>Traefik使用</title>
      <link>https://blog.javachen.space/2019/12/24/traefik/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/12/24/traefik/</guid>
      <description>traefik 是一个开源的反向代理和负载均衡工具，现在官方介绍中将其定位为云原生的边缘路由器，且用了一堆修饰词：简单、自动、高速、全面、开源、产品级、内</description>
    </item>
    
    <item>
      <title>Drone阅读清单</title>
      <link>https://blog.javachen.space/2019/12/12/drone-reading-list/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/12/12/drone-reading-list/</guid>
      <description>Drone实践 Docker 容器环境下的持续集成最佳实践：构建基于 Drone + GitFlow + K8s 的云原生语义化 CI 工作流 容器环境持续集成优化，Drone CI 提速 500% 在Kubern</description>
    </item>
    
    <item>
      <title>使用Helm安装Drone集成Gitlab</title>
      <link>https://blog.javachen.space/2019/12/11/install-drone-with-gitlab-using-helm/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/12/11/install-drone-with-gitlab-using-helm/</guid>
      <description>Drone 是用 Go 语言编写的基于 Docker 构建的开源轻量级 CI/CD 工具，可以和 Gitlab 集成使用。本文主要记录安装 Drone 的过程，并集成 Gitlab。 创建证书 参考 使用Cert Ma</description>
    </item>
    
    <item>
      <title>Cert Manager使用ACME-DNS生成证书</title>
      <link>https://blog.javachen.space/2019/12/06/create-certificate-with-cert-manager-using-acme-dns/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/12/06/create-certificate-with-cert-manager-using-acme-dns/</guid>
      <description>之前使用cert-manager-webhook-dnspod来生成DNSPOD的泛域名的证书，但是遇到 一个问题 导致证书生成失败，所以，需要</description>
    </item>
    
    <item>
      <title>Kubernetes常用命令</title>
      <link>https://blog.javachen.space/2019/11/29/some-commads-of-kubernetes/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/29/some-commads-of-kubernetes/</guid>
      <description>查找K8S中高磁盘占用 在节点上执行： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ sudo du -h --max-depth 1 /var/lib/docker/ 187M /var/lib/docker/containers 0 /var/lib/docker/plugins 15G /var/lib/docker/overlay2 17M /var/lib/docker/image 242M /var/lib/docker/volumes 0 /var/lib/docker/trust 108K /var/lib/docker/network 0 /var/lib/docker/swarm 16K /var/lib/docker/builder 56K /var/lib/docker/buildkit 0 /var/lib/docker/tmp 0 /var/lib/docker/runtimes 15G /var/lib/docker/ 得到的确是</description>
    </item>
    
    <item>
      <title>Kubernetes存储之Volume</title>
      <link>https://blog.javachen.space/2019/11/12/kubernetes-storage-volumes/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/12/kubernetes-storage-volumes/</guid>
      <description>容器和Pod生命周期可能很短，会被频繁销毁和创建。容器销毁时，保存在容器的内部文件系统中的数据都会被清楚。 为了持久化保存容器的数据，可以使用</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之ConfigMap</title>
      <link>https://blog.javachen.space/2019/11/11/kubernetes-resource-configmap/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/11/kubernetes-resource-configmap/</guid>
      <description>在实际的应用部署中，经常需要为各种应用/中间件配置各种参数，如数据库地址、用 户名、密码等， 而且大多数生产环境中的应用程序配置较为复杂，可能是</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之Pod</title>
      <link>https://blog.javachen.space/2019/11/10/kubernetes-resource-pod/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/10/kubernetes-resource-pod/</guid>
      <description>基本概念 Pod是Kubernetes集群中最基本的资源对象。每个Pod由一个或多个业务容器和一个根容器(Pause容器)组成。 Kuberne</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之Secret</title>
      <link>https://blog.javachen.space/2019/11/10/kubernetes-resource-secret/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/10/kubernetes-resource-secret/</guid>
      <description>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 ssh key。将这些信息放在 secret 中比放在 pod 的定义中或者 docker 镜像中来说更加安全和灵活。 Secre</description>
    </item>
    
    <item>
      <title>Helm安装Rancher并配置DNS01校验证书</title>
      <link>https://blog.javachen.space/2019/11/07/rancher-tls-with-letsencrypt-dns01/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/07/rancher-tls-with-letsencrypt-dns01/</guid>
      <description>版本说明 版本说明： Rancher：v2.3.5 Cert-Manager：v0.12.0 Rancher Chart源码 Rancher Chart源码在 https://github.com/rancher/rancher/tree/master/chart ，当前ranche</description>
    </item>
    
    <item>
      <title>使用Cert Manager生成Let’s Encrypt证书</title>
      <link>https://blog.javachen.space/2019/11/04/using-cert-manager-with-nginx-ingress/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/04/using-cert-manager-with-nginx-ingress/</guid>
      <description>安装 Cert Manager 参考 安装Cert Manager ，进行安装。 Let’s Encrypt 证书颁发原理 Let’s Encrypt 利用 ACME 协议来校验域名是否真的属于你，校验成功后就可以自动颁发免费证</description>
    </item>
    
    <item>
      <title>安装Cert Manager</title>
      <link>https://blog.javachen.space/2019/11/02/install-cert-manager/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/02/install-cert-manager/</guid>
      <description>参考官方文档： https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html 创建命名空间 1 kubectl create namespace cert-manager cert-manager 部署时会生成 ValidatingWebhookConfiguration 注册ValidatingAdmissionWebhook 来实现 CRD 校验，而Validat</description>
    </item>
    
    <item>
      <title>使用Helm安装Drone并集成Gitea</title>
      <link>https://blog.javachen.space/2019/11/01/install-gitea-and-drone-with-helm/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/01/install-gitea-and-drone-with-helm/</guid>
      <description>首先安装Gitea，再安装Drone 安装Gitea 创建证书 参考 使用Cert Manager配置Let’s Encrypt证书 ，先要创建一个Clu</description>
    </item>
    
    <item>
      <title>使用Helm安装Harbor</title>
      <link>https://blog.javachen.space/2019/10/31/install-harbor-with-helm/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/31/install-harbor-with-helm/</guid>
      <description>Harbor是构建企业级私有docker镜像的仓库的开源解决方案，它是Docker Registry的更高级封装，它除了提供友好的Web UI界</description>
    </item>
    
    <item>
      <title>安装Helm</title>
      <link>https://blog.javachen.space/2019/10/31/install-helm/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/31/install-helm/</guid>
      <description>Helm 是由 Deis 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。本文主要是记录Helm 2的安装过程。 Helm镜像 Helm官方镜像：https://k</description>
    </item>
    
    <item>
      <title>使用Kubeadm安装单节点kubernetes</title>
      <link>https://blog.javachen.space/2019/10/30/install-single-k8s-with-kubeadm/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/30/install-single-k8s-with-kubeadm/</guid>
      <description>本文使用Kubeadm来安装一个单节点的Kubernetes环境，以加深对Kubernetes各个组件和安装过程的理解。 环境准备 请参考 使用R</description>
    </item>
    
    <item>
      <title>使用RKE安装单节点kubernetes</title>
      <link>https://blog.javachen.space/2019/10/30/install-single-k8s-with-rke/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/30/install-single-k8s-with-rke/</guid>
      <description>Kubernetes 是Google的一种基于容器的开源服务编排解决方案。在我们进行Kubernetes的学习前，为了对Kubernetes的工作原理有一个大概</description>
    </item>
    
  </channel>
</rss>