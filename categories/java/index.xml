<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 关注Java、Hadoop、Kubernetes和BI</title>
    <link>https://blog.javachen.space/categories/java/</link>
    <description>Recent content in java on 关注Java、Hadoop、Kubernetes和BI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.javachen.space/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Struts2</title>
      <link>https://blog.javachen.space/2019/07/01/struts2/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/07/01/struts2/</guid>
      <description>Struts2概述 ​Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 Servlet，在 MVC 设计模式中，Struts2 作为控制</description>
    </item>
    
    <item>
      <title>Java Server Faces</title>
      <link>https://blog.javachen.space/2019/06/29/jsf/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/06/29/jsf/</guid>
      <description>1、JSF介绍 JSF 的诞生 JSF的诞生还要追溯到2001年，在2001年5月，Sun制定了一个用户界面框架的规范JSR#127，而JSF 规范的1</description>
    </item>
    
    <item>
      <title>Java Web框架发展历程</title>
      <link>https://blog.javachen.space/2019/06/29/java-web-framework/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/06/29/java-web-framework/</guid>
      <description>Model1 ​在 Web 早期的开发中，通常采用的都是 Model1 模式，就是使用 JSP+JavaBean 技术，将页面显示和业务逻辑处理分开，由JSP页面来接收客户端请求，用JavaBean或</description>
    </item>
    
    <item>
      <title>MyBatis源码分析：SqlSession</title>
      <link>https://blog.javachen.space/2016/04/21/mybatis-sqlSession-source-code/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/04/21/mybatis-sqlSession-source-code/</guid>
      <description>从这段代码中可以看到MyBatis的初始化过程： 1 2 3 4 5 6 7 8 DataSource dataSource = ...; TransactionFactory transactionFactory = new JdbcTransactionFactory(); Environment environment = new Environment(&amp;#34;Production&amp;#34;, transactionFactory, dataSource); Configuration configuration = new Configuration(environment); configuration.setLazyLoadingEnabled(true); configuration.getTypeAliasRegistry().registerAlias(Blog.class); configuration.addMapper(BlogMapper.class); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration); 在创建了Confi</description>
    </item>
    
    <item>
      <title>MyBatis源码分析：如何解析配置文件</title>
      <link>https://blog.javachen.space/2016/04/21/how-to-parse-mybatis-configuration/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/04/21/how-to-parse-mybatis-configuration/</guid>
      <description>MyBatis可以使用xml或者注解的方式进行配置，不管是哪种方式，最终会将获取到的配置参数设置到Configuration类中，例如，Sq</description>
    </item>
    
    <item>
      <title>UML类之间关系</title>
      <link>https://blog.javachen.space/2016/04/01/uml-class-realation/</link>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/04/01/uml-class-realation/</guid>
      <description>前面两篇文章讲到了使用PlantUML来画类图，要想准确地画出类与类之间的关系，必须理清类和类之间的关系。类的关系有泛化(Generaliz</description>
    </item>
    
    <item>
      <title>PlantUML安装和使用</title>
      <link>https://blog.javachen.space/2016/02/29/plantuml-install-and-usage/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/02/29/plantuml-install-and-usage/</guid>
      <description>什么是PlantUML PlantUML是一个快速创建UML图形的组件，PlantUML支持的图形有： sequence diagram, use case diagram, class diagram, activity diagram, component diagram, state diagram, object diagram, wireframe graphical interface Pl</description>
    </item>
    
    <item>
      <title>PlantUML类图</title>
      <link>https://blog.javachen.space/2016/02/29/plantuml-class-diagram/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/02/29/plantuml-class-diagram/</guid>
      <description>类之间的关系 PlantUML用下面的符号来表示类之间的关系： 泛化，Generalization：&amp;lt;|-- 关联，Association：</description>
    </item>
    
    <item>
      <title>MyBatis源码分析：Configuration</title>
      <link>https://blog.javachen.space/2016/02/26/source-code-analytic-of-mybatis-configuration/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/02/26/source-code-analytic-of-mybatis-configuration/</guid>
      <description>MyBatis依赖的jar不多，而且代码行数也没多少，其中使用了大量的设计模式，值得好好学习。下图是MyBatis的一张架构图，来自Java</description>
    </item>
    
    <item>
      <title>Maven的一些技巧</title>
      <link>https://blog.javachen.space/2015/01/20/maven-skills/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/01/20/maven-skills/</guid>
      <description>本文主要收集一些 Maven 的使用技巧，包括 Maven 常见命令、创建多模块项目、上传本地 jar 到插件以及常用的插件等等，本篇文章会保持不停的更新。 创建 maven 项目 1 $ mvn</description>
    </item>
    
    <item>
      <title>Gradle构建多模块项目</title>
      <link>https://blog.javachen.space/2015/01/07/build-multi-module-project-with-gradle/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/01/07/build-multi-module-project-with-gradle/</guid>
      <description>废话不多说，直接进入主题。 1. 创建项目 首先创建项目，名称为 test： 1 2 mkdir test &amp;amp;&amp;amp; cd test gradle init 这时候的项目结构如下： 1 2 3 4 5 6 7 8 9 10 11 12 ➜ test tree . ├</description>
    </item>
    
    <item>
      <title>编译Dubbo源码并测试</title>
      <link>https://blog.javachen.space/2014/09/24/compile-and-test-dubbo/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2014/09/24/compile-and-test-dubbo/</guid>
      <description>Dubbo是阿里巴巴内部的SOA服务化治理方案的核心框架，每天为2000+ 个服务提供3,000,000,000+ 次访问量支持，并被广泛应用于</description>
    </item>
    
    <item>
      <title>Java笔记：Java内存模型</title>
      <link>https://blog.javachen.space/2014/04/09/note-about-jvm-memery-model/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2014/04/09/note-about-jvm-memery-model/</guid>
      <description>1. 基本概念 《深入理解Java内存模型》详细讲解了java的内存模型，这里对其中的一些基本概念做个简单的笔记。以下内容摘自 《深入理解Java内</description>
    </item>
    
  </channel>
</rss>