<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on JavaChen Blog - Ramblings of a coder</title>
    <link>https://blog.javachen.space/tags/kubernetes/</link>
    <description>Recent content in kubernetes on JavaChen Blog - Ramblings of a coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.javachen.space/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes常用命令</title>
      <link>https://blog.javachen.space/2019/11/29/some-commads-of-kubernetes/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/29/some-commads-of-kubernetes/</guid>
      <description>删除命名空间 1 2 3 4 NAMESPACE=cert-manager kubectl proxy &amp;amp; kubectl get namespace $NAMESPACE -o json |jq &amp;#39;.spec = {&amp;#34;finalizers&amp;#34;:[]}&amp;#39; &amp;gt;temp.json curl -k -H &amp;#34;Content-Type: application/json&amp;#34; -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$NAMESPACE/finalize 将finalizer的value删除，这里将其设置为[] 1 kubectl edit namespaces cert-manager</description>
    </item>
    
    <item>
      <title>Kubernetes存储之Volume</title>
      <link>https://blog.javachen.space/2019/11/12/kubernetes-storage-volumes/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/12/kubernetes-storage-volumes/</guid>
      <description>容器和Pod生命周期可能很短，会被频繁销毁和创建。容器销毁时，保存在容器的内部文件系统中的数据都会被清楚。 为了持久化保存容器的数据，可以使用</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之ConfigMap</title>
      <link>https://blog.javachen.space/2019/11/11/kubernetes-resource-configmap/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/11/kubernetes-resource-configmap/</guid>
      <description>在实际的应用部署中，经常需要为各种应用/中间件配置各种参数，如数据库地址、用 户名、密码等， 而且大多数生产环境中的应用程序配置较为复杂，可能是</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之Pod</title>
      <link>https://blog.javachen.space/2019/11/10/kubernetes-resource-pod/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/10/kubernetes-resource-pod/</guid>
      <description>基本概念 Pod是Kubernetes集群中最基本的资源对象。每个Pod由一个或多个业务容器和一个根容器(Pause容器)组成。 Kuberne</description>
    </item>
    
    <item>
      <title>Kubernetes资源对象之Secret</title>
      <link>https://blog.javachen.space/2019/11/10/kubernetes-resource-secret/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/10/kubernetes-resource-secret/</guid>
      <description>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 ssh key。将这些信息放在 secret 中比放在 pod 的定义中或者 docker 镜像中来说更加安全和灵活。 Secre</description>
    </item>
    
    <item>
      <title>Rancher使用letsEncrypt生成证书并做DNS01校验</title>
      <link>https://blog.javachen.space/2019/11/07/rancher-tls-with-letsencrypt-dns01/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/07/rancher-tls-with-letsencrypt-dns01/</guid>
      <description>前面使用Helm安装Rancher HA集群，配置证书的时候，因为没有权威证书，所以测试过利用Rancher和自签名文件来生成证书，但是生成的</description>
    </item>
    
    <item>
      <title>kubernetes使用acme.sh生成letsencrypt证书</title>
      <link>https://blog.javachen.space/2019/11/05/using-acme-sh-with-nginx-ingress/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/05/using-acme-sh-with-nginx-ingress/</guid>
      <description>kubernetes中很多地方都要配置SSL证书，权威的证书要钱，免费的证书数量有限，而 acme.sh 实现了 acme 协议，可以从 letsencrypt 生成免费的证书，而且还支持泛</description>
    </item>
    
    <item>
      <title>Kubernetes SSL证书管理</title>
      <link>https://blog.javachen.space/2019/11/04/kubernetes-SSL-TLS/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/04/kubernetes-SSL-TLS/</guid>
      <description>HTTP over SSL 要保证Web浏览器到服务器的安全连接，HTTPS几乎是唯一选择。HTTPS其实就是HTTP over SSL，也就是让HTTP连接建立在SSL安</description>
    </item>
    
    <item>
      <title>使用Cert Manager配置Let’s Encrypt证书</title>
      <link>https://blog.javachen.space/2019/11/04/using-cert-manager-with-nginx-ingress/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/04/using-cert-manager-with-nginx-ingress/</guid>
      <description>在 Kubernetes 集群中，可以使用Cert-Manager创建 HTTPS 证书并自动续期，支持从 Let’s Encrypt 、HashiCorp Vault 、Venafi、自签名keypai</description>
    </item>
    
    <item>
      <title>使用Helm安装Rancher HA集群</title>
      <link>https://blog.javachen.space/2019/11/03/install-rancher-ha-with-helm/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/03/install-rancher-ha-with-helm/</guid>
      <description>本文主要记录是由Helm来安装Rancher的过程。Rancher是一个企业级多集群Kubernetes管理平台；用户可以在Rancher上</description>
    </item>
    
    <item>
      <title>安装Cert Manager</title>
      <link>https://blog.javachen.space/2019/11/02/install-cert-manager/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/02/install-cert-manager/</guid>
      <description>本文主要记录kubernetes中安装Cert-Manager组件的过程。 本文使用Cert Manager最新版本0.12.0，该版本相对于之</description>
    </item>
    
    <item>
      <title>使用Helm安装Gitea和Drone</title>
      <link>https://blog.javachen.space/2019/11/01/install-gitea-and-drone-with-helm/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/11/01/install-gitea-and-drone-with-helm/</guid>
      <description>Drone是一种基于容器技术的持续交付系统。Drone使用简单的YAML配置文件来定义和执行Docker容器中的Pipelines。Dron</description>
    </item>
    
    <item>
      <title>使用Helm安装Harbor</title>
      <link>https://blog.javachen.space/2019/10/31/install-harbor-with-helm/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/31/install-harbor-with-helm/</guid>
      <description>Harbor是构建企业级私有docker镜像的仓库的开源解决方案，它是Docker Registry的更高级封装，它除了提供友好的Web UI界</description>
    </item>
    
    <item>
      <title>安装Helm</title>
      <link>https://blog.javachen.space/2019/10/31/install-helm/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/31/install-helm/</guid>
      <description>Helm 是由 Deis 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。本文主要是记录Helm 2的安装过程。 安装Helm2 安装 Helm 客户端 在Helm3发布之前，</description>
    </item>
    
    <item>
      <title>使用Kubeadm安装单节点kubernetes</title>
      <link>https://blog.javachen.space/2019/10/30/install-single-k8s-with-kubeadm/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/30/install-single-k8s-with-kubeadm/</guid>
      <description>本文使用Kubeadm来安装一个单节点的Kubernetes环境，以加深对Kubernetes各个组件和安装过程的理解。 环境准备 请参考 使用R</description>
    </item>
    
    <item>
      <title>使用RKE安装单节点kubernetes</title>
      <link>https://blog.javachen.space/2019/10/30/install-single-k8s-with-rke/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/10/30/install-single-k8s-with-rke/</guid>
      <description>Kubernetes 是Google的一种基于容器的开源服务编排解决方案。在我们进行Kubernetes的学习前，为了对Kubernetes的工作原理有一个大概</description>
    </item>
    
  </channel>
</rss>