<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recommendation on JavaChen Blog - Ramblings of a coder</title>
    <link>https://javachen.github.io/tags/recommendation/</link>
    <description>Recent content in recommendation on JavaChen Blog - Ramblings of a coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 15 Jun 2015 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://javachen.github.io/tags/recommendation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>推荐系统笔记</title>
      <link>https://javachen.github.io/2015/06/15/note-about-recommendation-system/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/06/15/note-about-recommendation-system/</guid>
      <description>1、产生原因 信息过载 无明确需求 2、什么是推荐？ 在信息过载又没有明确需求的情况下，找到用户感兴趣的东西。 《Mahout实战》上的定义是：推荐就</description>
    </item>
    
    <item>
      <title>使用Mahout实现协同过滤</title>
      <link>https://javachen.github.io/2015/06/10/collaborative-filtering-using-mahout/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/06/10/collaborative-filtering-using-mahout/</guid>
      <description>Mahout算法框架自带的推荐器有下面这些： GenericUserBasedRecommender：基于用户的推荐器，用户数量少时速度快； G</description>
    </item>
    
    <item>
      <title>如何使用Spark ALS实现协同过滤</title>
      <link>https://javachen.github.io/2015/06/01/how-to-implement-collaborative-filtering-using-spark-als/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/06/01/how-to-implement-collaborative-filtering-using-spark-als/</guid>
      <description>本文主要记录最近一段时间学习和实现Spark MLlib中的协同过滤的一些总结，希望对大家熟悉Spark ALS算法有所帮助。 更新： 【2016.</description>
    </item>
    
    <item>
      <title>Spark MLlib中的协同过滤</title>
      <link>https://javachen.github.io/2015/04/17/spark-mllib-collaborative-filtering/</link>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/04/17/spark-mllib-collaborative-filtering/</guid>
      <description>本文主要通过Spark官方的例子理解ALS协同过滤算法的原理和编码过程，然后通过对电影进行推荐来熟悉一个完整的推荐过程。 协同过滤 协同过滤常被</description>
    </item>
    
    <item>
      <title>Reading List 2015-03</title>
      <link>https://javachen.github.io/2015/03/30/reading-list-2015-03/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/30/reading-list-2015-03/</guid>
      <description>这个月主要在关注流式处理和推荐系统方面的技术。如何从零构建一个推荐系统？网上能找到的有指导意义的资料太少，只能一点点摸索？ Spark LeanCloud 离线数据分析功</description>
    </item>
    
    <item>
      <title>Mahout推荐引擎介绍</title>
      <link>https://javachen.github.io/2014/09/22/mahout-recommend-engine/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/09/22/mahout-recommend-engine/</guid>
      <description>Mahout 是一个来自 Apache 的、开源的机器学习软件库，他主要关注于推荐引擎（协同过滤）、聚类和分类。 推荐一般是基于物品或者用户进行推荐相关。 聚类是讲大量的</description>
    </item>
    
  </channel>
</rss>