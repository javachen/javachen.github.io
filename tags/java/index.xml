<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on JavaChen Blog - Ramblings of a coder</title>
    <link>https://javachen.github.io/tags/java/</link>
    <description>Recent content in java on JavaChen Blog - Ramblings of a coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://javachen.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Web框架发展历程</title>
      <link>https://javachen.github.io/2019/06/29/java-web-framework/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2019/06/29/java-web-framework/</guid>
      <description>Model1 ​在 Web 早期的开发中，通常采用的都是 Model1 模式，就是使用 JSP+JavaBean 技术，将页面显示和业务逻辑处理分开，由JSP页面来接收客户端请求，用JavaBean或</description>
    </item>
    
    <item>
      <title>DevTools in Spring Boot</title>
      <link>https://javachen.github.io/2016/02/22/devtools-in-spring-boot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2016/02/22/devtools-in-spring-boot/</guid>
      <description>本文主要了解Spring Boot 1.3.0新添加的spring-boot-devtools模块的使用，该模块主要是为了提高开发者开发Spring B</description>
    </item>
    
    <item>
      <title>Spring Boot Profile使用</title>
      <link>https://javachen.github.io/2016/02/22/profile-usage-in-spring-boot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2016/02/22/profile-usage-in-spring-boot/</guid>
      <description>Spring Boot使用@Profile注解可以实现不同环境下配置参数的切换，任何@Component或@Configuration注解的类都可以使用</description>
    </item>
    
    <item>
      <title>Spring Boot之一：如何运行项目</title>
      <link>https://javachen.github.io/2015/03/13/how-to-run-spring-boot-application/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/13/how-to-run-spring-boot-application/</guid>
      <description>介绍 Spring Boot 是 Spring 产品中一个新的子项目，致力于简便快捷地搭建基于 Spring 的独立可运行的应用。大多数的 Spring Boot 应用只需要非常少的 Spring 配置。 你能够使用 Spring Boot 创建 Java 应</description>
    </item>
    
    <item>
      <title>Spring Boot之二：特性</title>
      <link>https://javachen.github.io/2015/03/13/some-spring-boot-features/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/13/some-spring-boot-features/</guid>
      <description>1. SpringApplication SpringApplication 类是启动 Spring Boot 应用的入口类，你可以创建一个包含 main() 方法的类，来运行 SpringApplication.run 这个静态方法： 1 2 3 public static void main(String[] args) { SpringApplication.run(MySpringConfiguration.class, args); } 运行该类会有如下输出： 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Spring AOP Example Tutorial</title>
      <link>https://javachen.github.io/2015/03/11/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations-xml-configuration/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/11/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations-xml-configuration/</guid>
      <description>这是一篇翻译，原文：Spring AOP Example Tutorial – Aspect, Advice, Pointcut, JoinPoint, Annotations, XML Configuration Spring 框架发展出了两个核心概念：依赖注入 和面向切面编程（AOP）。我们已经了解了 Spring 的依赖注</description>
    </item>
    
    <item>
      <title>快速了解RESTEasy</title>
      <link>https://javachen.github.io/2015/03/10/quick-start-of-resteasy/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/10/quick-start-of-resteasy/</guid>
      <description>什么是 RESTEasy RESTEasy 是 JBoss 的一个开源项目，提供各种框架帮助你构建 RESTful Web Services 和 RESTful Java 应用程序。它是 JAX-RS 规范的一个完整实现并通过 JCP 认证。作为一个 JBOSS 的项目，它当然能和</description>
    </item>
    
    <item>
      <title>Java笔记：异常</title>
      <link>https://javachen.github.io/2015/03/04/note-about-java-exception/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/03/04/note-about-java-exception/</guid>
      <description>定义 在《java编程思想》中这样定义异常：阻止当前方法或作用域继续执行的问题。异常是Java程序设计中不可分割的一部分，如果不了解如何使用它</description>
    </item>
    
    <item>
      <title>Maven的一些技巧</title>
      <link>https://javachen.github.io/2015/01/20/maven-skills/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/01/20/maven-skills/</guid>
      <description>本文主要收集一些 Maven 的使用技巧，包括 Maven 常见命令、创建多模块项目、上传本地 jar 到插件以及常用的插件等等，本篇文章会保持不停的更新。 创建 maven 项目 1 $ mvn</description>
    </item>
    
    <item>
      <title>Gradle构建多模块项目</title>
      <link>https://javachen.github.io/2015/01/07/build-multi-module-project-with-gradle/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/01/07/build-multi-module-project-with-gradle/</guid>
      <description>废话不多说，直接进入主题。 1. 创建项目 首先创建项目，名称为 test： 1 2 mkdir test &amp;amp;&amp;amp; cd test gradle init 这时候的项目结构如下： 1 2 3 4 5 6 7 8 9 10 11 12 ➜ test tree . ├</description>
    </item>
    
    <item>
      <title>Spring集成JPA2.0</title>
      <link>https://javachen.github.io/2014/11/24/spring-with-jpa2/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/11/24/spring-with-jpa2/</guid>
      <description>JPA 全称 Java Persistence API，是Java EE 5标准之一，是一个 ORM 规范，由厂商来实现该规范，目前有 Hibernate、OpenJPA、TopLink、Ecl</description>
    </item>
    
    <item>
      <title>Effective Java 笔记</title>
      <link>https://javachen.github.io/2014/06/17/note-about-effective-java/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/06/17/note-about-effective-java/</guid>
      <description>创建和销毁对象 NO.1 考虑用静态工厂方法代替构造函数 静态工厂方法好处： 1、构造函数有命名的限制，而静态方法有自己的名字，更加易于理解。 2、静态工厂</description>
    </item>
    
    <item>
      <title>Java笔记：Java内存模型</title>
      <link>https://javachen.github.io/2014/04/09/note-about-jvm-memery-model/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/04/09/note-about-jvm-memery-model/</guid>
      <description>1. 基本概念 《深入理解Java内存模型》详细讲解了java的内存模型，这里对其中的一些基本概念做个简单的笔记。以下内容摘自 《深入理解Java内</description>
    </item>
    
    <item>
      <title>Java笔记：集合框架实现原理</title>
      <link>https://javachen.github.io/2013/06/08/java-collection-framework/</link>
      <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2013/06/08/java-collection-framework/</guid>
      <description>这篇文章是对http://www.cnblogs.com/skywang12345/category/455711.html中java集合框</description>
    </item>
    
  </channel>
</rss>