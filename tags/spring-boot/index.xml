<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring boot on 关注Java、Hadoop、Kubernetes和BI</title>
    <link>https://blog.javachen.space/tags/spring-boot/</link>
    <description>Recent content in spring boot on 关注Java、Hadoop、Kubernetes和BI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.javachen.space/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot整合Servlet、Filter、Listener</title>
      <link>https://blog.javachen.space/2019/04/07/spring-boot-with-servlet-filter-listener/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/04/07/spring-boot-with-servlet-filter-listener/</guid>
      <description>Spring Boot整合Servlet、Filter、Listener有两种方式：一是通过注解扫描完成；二是通过方法完成。 通过注解扫描完成 主要是用到了</description>
    </item>
    
    <item>
      <title>Spring Boot整合视图层</title>
      <link>https://blog.javachen.space/2019/04/07/spring-boot-with-web-view/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2019/04/07/spring-boot-with-web-view/</guid>
      <description>SpringBoot访问静态资源 1、从classpath/static目录访问静态资源，目录名称必须是static 2、从ServletCon</description>
    </item>
    
    <item>
      <title>DevTools in Spring Boot</title>
      <link>https://blog.javachen.space/2016/02/22/devtools-in-spring-boot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/02/22/devtools-in-spring-boot/</guid>
      <description>本文主要了解Spring Boot 1.3.0新添加的spring-boot-devtools模块的使用，该模块主要是为了提高开发者开发Spring B</description>
    </item>
    
    <item>
      <title>Spring Boot Profile使用</title>
      <link>https://blog.javachen.space/2016/02/22/profile-usage-in-spring-boot/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/02/22/profile-usage-in-spring-boot/</guid>
      <description>Spring Boot使用@Profile注解可以实现不同环境下配置参数的切换，任何@Component或@Configuration注解的类都可以使用</description>
    </item>
    
    <item>
      <title>Spring Boot之一：如何运行项目</title>
      <link>https://blog.javachen.space/2015/03/13/how-to-run-spring-boot-application/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/03/13/how-to-run-spring-boot-application/</guid>
      <description>介绍 Spring Boot 是 Spring 产品中一个新的子项目，致力于简便快捷地搭建基于 Spring 的独立可运行的应用。大多数的 Spring Boot 应用只需要非常少的 Spring 配置。 你能够使用 Spring Boot 创建 Java 应</description>
    </item>
    
    <item>
      <title>Spring Boot之二：特性</title>
      <link>https://blog.javachen.space/2015/03/13/some-spring-boot-features/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/03/13/some-spring-boot-features/</guid>
      <description>1. SpringApplication SpringApplication 类是启动 Spring Boot 应用的入口类，你可以创建一个包含 main() 方法的类，来运行 SpringApplication.run 这个静态方法： 1 2 3 public static void main(String[] args) { SpringApplication.run(MySpringConfiguration.class, args); } 运行该类会有如下输出： 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>使用Spring Boot和Gradle创建AngularJS项目</title>
      <link>https://blog.javachen.space/2015/01/06/build-app-with-spring-boot-and-gradle/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/01/06/build-app-with-spring-boot-and-gradle/</guid>
      <description>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定</description>
    </item>
    
  </channel>
</rss>