<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on 关注Java、Hadoop、Kubernetes和BI</title>
    <link>https://blog.javachen.space/tags/scala/</link>
    <description>Recent content in scala on 关注Java、Hadoop、Kubernetes和BI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.javachen.space/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala Reading List</title>
      <link>https://blog.javachen.space/2016/01/23/scala-reading-list/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2016/01/23/scala-reading-list/</guid>
      <description>学习教程 为 Java程序员准备的Scala教程 Scala 初学指南：本书是 The Neophyte&amp;rsquo;s Guide to Scala 的中文翻译，是 Daniel Westheide 写的一系列有关 Scala 的文章。 http://ifeve.com/tag/scala/ Scala 指南：开始精彩的Sca</description>
    </item>
    
    <item>
      <title>Scala中的对象</title>
      <link>https://blog.javachen.space/2015/06/19/scala-object/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/06/19/scala-object/</guid>
      <description>Scala中没有静态方法或静态字段，但可以使用object这个语法结构来实现相同的功能。对象与类在语法层面上很相似，除了不能提供构造器参数外</description>
    </item>
    
    <item>
      <title>Scala中的类</title>
      <link>https://blog.javachen.space/2015/06/19/scala-class/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/06/19/scala-class/</guid>
      <description>阅读《Programming in Scala》，整理Scala类、继承、重载相关的一些知识点。 类 Scala使用class来定义类。 1 2 3 4 5 class Counter</description>
    </item>
    
    <item>
      <title>使用Scala高价函数简化代码</title>
      <link>https://blog.javachen.space/2015/06/18/simplify-code-using-scala-higher-order-function/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/06/18/simplify-code-using-scala-higher-order-function/</guid>
      <description>在Scala里，带有其他函数做参数的函数叫做高阶函数，使用高阶函数可以简化代码。 减少重复代码 有这样一段代码，查找当前目录样以某一个字符串结尾</description>
    </item>
    
    <item>
      <title>Scala中下划线的用途</title>
      <link>https://blog.javachen.space/2015/04/23/all-the-uses-of-an-underscore-in-scala/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/04/23/all-the-uses-of-an-underscore-in-scala/</guid>
      <description>存在性类型： 1 2 3 def foo(l: List[Option[_]]) = def f(m: M[_]) 高阶类型参数： 1 2 3 case class A[K[_],T](a: K[T]) def f[M[_]] 临时变量： 1 val _ = 5 临时参数： 1 List(1, 2, 3) foreach { _ =&amp;gt; println(&amp;#34;Hi&amp;#34;) } //List(1, 2, 3) foreach { t =&amp;gt; println(&amp;#34;Hi&amp;#34;) } 通配模式</description>
    </item>
    
    <item>
      <title>Scala集合</title>
      <link>https://blog.javachen.space/2015/04/22/scala-collections/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/04/22/scala-collections/</guid>
      <description>Scala有一个非常通用，丰富，强大，可组合的集合库；集合是高阶的(high level)并暴露了一大套操作方法。很多集合的处理和转换可以被表</description>
    </item>
    
    <item>
      <title>Scala基本语法和概念</title>
      <link>https://blog.javachen.space/2015/04/20/basic-of-scala/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/04/20/basic-of-scala/</guid>
      <description>本文主要包括Scala的安装过程并理解Scala的基本语法和概念，包括表达式、变量、基本类型、函数、流程控制等相关内容。 1. 安装 从All Versions Sc</description>
    </item>
    
    <item>
      <title>Spark本地模式运行</title>
      <link>https://blog.javachen.space/2015/03/30/spark-test-in-local-mode/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.javachen.space/2015/03/30/spark-test-in-local-mode/</guid>
      <description>Spark的安装分为几种模式，其中一种是本地运行模式，只需要在单节点上解压即可运行，这种模式不需要依赖Hadoop 环境。在本地运行模式中，m</description>
    </item>
    
  </channel>
</rss>