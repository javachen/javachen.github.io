<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on JavaChen Blog - Ramblings of a coder</title>
    <link>https://javachen.github.io/tags/python/</link>
    <description>Recent content in python on JavaChen Blog - Ramblings of a coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 30 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://javachen.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django中SQL查询</title>
      <link>https://javachen.github.io/2015/01/30/raw-sql-query-in-django/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/01/30/raw-sql-query-in-django/</guid>
      <description>当 Django 中模型提供的查询 API 不能满足要求时，你可能需要使用原始的 sql 查询，这时候就需要用到 Manager.raw() 方法。 Manager 类提供下面的一个方法，可以用于执行 sql： 1 Manager.raw(raw_query, params=None,</description>
    </item>
    
    <item>
      <title>Django中的ORM</title>
      <link>https://javachen.github.io/2015/01/15/django-orm/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/01/15/django-orm/</guid>
      <description>通过《如何创建一个Django网站》大概清楚了如何创建一个简单的 Django 网站，并了解了Django 中模板和模型使用方法。本篇文章主要在此基础上，了</description>
    </item>
    
    <item>
      <title>Django中的模型</title>
      <link>https://javachen.github.io/2015/01/14/django-model/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2015/01/14/django-model/</guid>
      <description>Django 中的模型主要用于定义数据的来源信息，其包括一些必要的字段和一些对存储的数据的操作。通常，一个模型对应着数据库中的一个表。 简单的概念： Django 中每</description>
    </item>
    
    <item>
      <title>使用Scrapy爬取知乎网站</title>
      <link>https://javachen.github.io/2014/06/08/using-scrapy-to-cralw-zhihu/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/06/08/using-scrapy-to-cralw-zhihu/</guid>
      <description>本文主要记录使用使用 Scrapy 登录并爬取知乎网站的思路。Scrapy的相关介绍请参考 使用Scrapy抓取数据。 相关代码，见 https://github.com/javachen/scrapy-zhihu-github ，在阅读这部分代码之前，</description>
    </item>
    
    <item>
      <title>Python开发框架Flask</title>
      <link>https://javachen.github.io/2014/05/11/flask-intro/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/05/11/flask-intro/</guid>
      <description>1. Flask介绍 Flask 是一个基于Python的微型的web开发框架。虽然Flask是微框架，不过我们并不需要像别的微框架建议的那样把所有代码都写</description>
    </item>
    
    <item>
      <title>Python模拟新浪微博登录</title>
      <link>https://javachen.github.io/2014/03/18/simulate-weibo-login-in-python/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/03/18/simulate-weibo-login-in-python/</guid>
      <description>看到一篇Python模拟新浪微博登录的文章，想熟悉一下其中实现方式，并且顺便掌握python相关知识点。 代码 下面的代码是来自上面这篇文章，并</description>
    </item>
    
    <item>
      <title>Python基础入门</title>
      <link>https://javachen.github.io/2014/02/22/python-introduction-of-basics/</link>
      <pubDate>Sat, 22 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://javachen.github.io/2014/02/22/python-introduction-of-basics/</guid>
      <description>1. Python介绍 Python是一种解释性的面向对象的语言。Python使用C语言编写，不需要事先声明变量的类型（动态类型），但是一旦变量有</description>
    </item>
    
  </channel>
</rss>